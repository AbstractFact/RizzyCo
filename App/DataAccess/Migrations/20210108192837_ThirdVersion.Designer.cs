// <auto-generated />
using System;
using DataAccess.EFCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(RizzyCoContext))]
    [Migration("20210108192837_ThirdVersion")]
    partial class ThirdVersion
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Models.Card", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MapID")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlayerID")
                        .HasColumnType("int");

                    b.Property<int?>("TerritoryID")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("MapID");

                    b.HasIndex("PlayerID");

                    b.HasIndex("TerritoryID");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("Domain.Models.Game", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Finished")
                        .HasColumnType("bit");

                    b.Property<int?>("MapID")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfPlayers")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MapID");

                    b.HasIndex("UserID");

                    b.ToTable("Games");
                });

            modelBuilder.Entity("Domain.Models.Map", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NumberOfAvailableArmies")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfContinents")
                        .HasColumnType("int");

                    b.Property<int>("NumberOfTerritories")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.ToTable("Maps");
                });

            modelBuilder.Entity("Domain.Models.Mission", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MapID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MapID");

                    b.ToTable("Missions");
                });

            modelBuilder.Entity("Domain.Models.Neighbour", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("DstID")
                        .HasColumnType("int");

                    b.Property<int?>("SrcID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("DstID");

                    b.HasIndex("SrcID");

                    b.ToTable("Neighbours");
                });

            modelBuilder.Entity("Domain.Models.Player", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("GameID")
                        .HasColumnType("int");

                    b.Property<int?>("MissionID")
                        .HasColumnType("int");

                    b.Property<int?>("PlayerColorID")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("GameID");

                    b.HasIndex("MissionID");

                    b.HasIndex("PlayerColorID");

                    b.HasIndex("UserID");

                    b.ToTable("Players");
                });

            modelBuilder.Entity("Domain.Models.PlayerColor", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Available")
                        .HasColumnType("bit");

                    b.Property<int?>("GameID")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.HasIndex("GameID");

                    b.ToTable("PlayerColors");
                });

            modelBuilder.Entity("Domain.Models.Territory", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("MapID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PlayerID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("MapID");

                    b.HasIndex("PlayerID");

                    b.ToTable("Territories");
                });

            modelBuilder.Entity("Domain.Models.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Domain.Models.Card", b =>
                {
                    b.HasOne("Domain.Models.Map", null)
                        .WithMany("Cards")
                        .HasForeignKey("MapID");

                    b.HasOne("Domain.Models.Player", "Player")
                        .WithMany("Cards")
                        .HasForeignKey("PlayerID");

                    b.HasOne("Domain.Models.Territory", "Territory")
                        .WithMany()
                        .HasForeignKey("TerritoryID");
                });

            modelBuilder.Entity("Domain.Models.Game", b =>
                {
                    b.HasOne("Domain.Models.Map", "Map")
                        .WithMany()
                        .HasForeignKey("MapID");

                    b.HasOne("Domain.Models.User", null)
                        .WithMany("Games")
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Domain.Models.Mission", b =>
                {
                    b.HasOne("Domain.Models.Map", null)
                        .WithMany("Missions")
                        .HasForeignKey("MapID");
                });

            modelBuilder.Entity("Domain.Models.Neighbour", b =>
                {
                    b.HasOne("Domain.Models.Territory", "Dst")
                        .WithMany()
                        .HasForeignKey("DstID");

                    b.HasOne("Domain.Models.Territory", "Src")
                        .WithMany()
                        .HasForeignKey("SrcID");
                });

            modelBuilder.Entity("Domain.Models.Player", b =>
                {
                    b.HasOne("Domain.Models.Game", "Game")
                        .WithMany("Players")
                        .HasForeignKey("GameID");

                    b.HasOne("Domain.Models.Mission", "Mission")
                        .WithMany()
                        .HasForeignKey("MissionID");

                    b.HasOne("Domain.Models.PlayerColor", "PlayerColor")
                        .WithMany()
                        .HasForeignKey("PlayerColorID");

                    b.HasOne("Domain.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserID");
                });

            modelBuilder.Entity("Domain.Models.PlayerColor", b =>
                {
                    b.HasOne("Domain.Models.Game", null)
                        .WithMany("PlayerColors")
                        .HasForeignKey("GameID");
                });

            modelBuilder.Entity("Domain.Models.Territory", b =>
                {
                    b.HasOne("Domain.Models.Map", null)
                        .WithMany("Territories")
                        .HasForeignKey("MapID");

                    b.HasOne("Domain.Models.Player", "Player")
                        .WithMany("Territories")
                        .HasForeignKey("PlayerID");
                });
#pragma warning restore 612, 618
        }
    }
}
